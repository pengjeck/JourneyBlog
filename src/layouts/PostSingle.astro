---
import { Image } from "astro:assets";
import { getSinglePage } from "@/lib/contentParser.astro";
import dateFormat from "@/lib/utils/dateFormat";
import { humanize, markdownify, slugify } from "@/lib/utils/textConverter";
import type { Post, PostData } from "@/types";

const allAuthors: Post[] = await getSinglePage("authors");
const { post } = Astro.props;
const { Content } = await post.render();
const { title, authors, categories, image, date, tags }: PostData = post.data;
---

<section class="section">
  <div class="container">
    <div class="row px-3">
      <div class="mx-auto lg:col-8">
        <div class="rounded-xl py-12 px-9 shadow md:p-[60px]">
          <article>
            <h1 set:html={markdownify(title)} class="h2" />
            <ul
              class="mt-4 mb-8 flex flex-wrap items-center space-x-3 text-text"
            >
              <li>
                {
                  allAuthors
                    .filter((author) =>
                      authors
                        .map((author) => slugify(author))
                        .includes(slugify(author.data.title)),
                    )
                    .map((author, i) => (
                      <a
                        href={`/authors/${slugify(author.slug)}`}
                        class="flex items-center hover:text-primary hover:underline"
                      >
                        <span>{author.data.title}</span>
                      </a>
                    ))
                }
              </li>
              <li>{dateFormat(date)}</li>
              <li>
                <ul>
                  {
                    categories.map((category: string) => (
                      <li class="inline-block">
                        <a
                          href={`/categories/${slugify(category)}`}
                          class="mr-3 hover:text-primary hover:underline"
                        >
                          {humanize(category)}
                        </a>
                      </li>
                    ))
                  }
                </ul>
              </li>
            </ul>
            {
              image && (
                <Image
                  src={image}
                  height={500}
                  width={1000}
                  alt={title}
                  class="rounded-lg"
                />
              )
            }
            <div class="content mb-16 text-left">
              <Content />
              <!-- <Markdown content={post.body} components={shortcodes} /> -->
            </div>
          </article>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Source: https://github.com/JuanM04/portfolio/blob/983b0ed0eabdac37bf8b7912d3e8128a443192b9/src/pages/docs/%5B...documentSlug%5D.astro#L74-L103
    // From this comment: https://github.com/withastro/astro/issues/4433#issuecomment-1584019991
    /**
     * @params {HTMLCollectionOf<HTMLElement>} graphs
     */
    async function renderDiagrams(graphs: HTMLCollectionOf<Element>) {
      const { default: mermaid } = await import("mermaid");
      mermaid.initialize({
        startOnLoad: false,
        fontFamily: "var(--sans-font)",
        // @ts-ignore This works, but TS expects a enum for some reason
        theme: window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "default",
      });

      for (const graph of graphs) {
        if (graph == undefined) continue;
        const src = graph.querySelector(".mermaid-src");

        if (src == undefined) continue;
        const content = src.innerText;

        if (!content) continue;
        let svg = document.createElement("svg");
        const id = (svg.id = "mermaid-" + Math.round(Math.random() * 100000));
        graph.appendChild(svg);
        mermaid.render(id, content).then((result) => {
          graph.innerHTML = result.svg;
        });
      }
    }

    const graphs = document.getElementsByClassName("mermaid");
    if (document.getElementsByClassName("mermaid").length > 0) {
      renderDiagrams(graphs);
    }
  </script>
</section>
